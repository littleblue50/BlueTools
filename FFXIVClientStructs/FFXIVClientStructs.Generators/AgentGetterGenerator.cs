using System.Collections.Immutable;
using FFXIVClientStructs.Generators.Extensions;
using FFXIVClientStructs.Generators.Helpers;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp.Syntax;

namespace FFXIVClientStructs.Generators;

[Generator]
internal sealed class AgentGetterGenerator : IIncrementalGenerator {
    private const string AgentAttributeName = "FFXIVClientStructs.Attributes.AgentAttribute";

    public void Initialize(IncrementalGeneratorInitializationContext context) {
        IncrementalValuesProvider<AgentGetterInfo> agentGetterInfos =
            context.SyntaxProvider.ForAttributeWithMetadataName(
                AgentAttributeName,
                static (node, _) => node is StructDeclarationSyntax { AttributeLists.Count: > 0 },
                static (context, _) => {
                    if (context.TargetSymbol is not INamedTypeSymbol structSymbol)
                        return null;
                    StructInfo structInfo = StructInfo.FromRoslyn(structSymbol);
                    if (!context.Attributes[0].TryGetConstructorArgument(0, out uint agentId))
                        return default;
                    return new AgentGetterInfo(structInfo, agentId);
                }).Where(static info => info is not null)!;

        context.RegisterSourceOutput(agentGetterInfos,
            static (sourceContext, item) => { sourceContext.AddSource($"{item.StructInfo.FullyQualifiedMetadataName}.InstanceGetter.g.cs", RenderInstanceGetter(item)); });

        IncrementalValueProvider<ImmutableArray<AgentGetterInfo>> collectedTargets = agentGetterInfos.Collect();

        context.RegisterSourceOutput(collectedTargets,
            static (sourceContext, item) => { sourceContext.AddSource("AgentModule.AgentGetters.g.cs", RenderAgentModuleGetters(item)); });
    }

    private static string RenderInstanceGetter(AgentGetterInfo agentGetterInfo) {
        using IndentedTextWriter writer = new();

        agentGetterInfo.StructInfo.RenderStart(writer);

        writer.WriteLine($"public static {agentGetterInfo.StructInfo.Name}* Instance()");
        using (writer.WriteBlock()) {
            writer.WriteLine("var agentModule = AgentModule.Instance();");
            writer.WriteLine($"return agentModule == null ? null : ({agentGetterInfo.StructInfo.Name}*)agentModule->GetAgentByInternalId((AgentId){agentGetterInfo.AgentId});");
        }

        agentGetterInfo.StructInfo.RenderEnd(writer);

        return writer.ToString();
    }

    private static string RenderAgentModuleGetters(ImmutableArray<AgentGetterInfo> agentGetterInfos) {
        using IndentedTextWriter writer = new();

        writer.WriteLine("// <auto-generated>");
        writer.WriteLine();

        writer.WriteLine("namespace FFXIVClientStructs.FFXIV.Client.UI.Agent;");
        writer.WriteLine();

        writer.WriteLine("public unsafe partial struct AgentModule");
        using (writer.WriteBlock()) {
            foreach (AgentGetterInfo agentGetterInfo in agentGetterInfos) {
                writer.WriteLine($"public {agentGetterInfo.StructInfo.FullyQualifiedMetadataName}* Get{agentGetterInfo.StructInfo.Name}() => ({agentGetterInfo.StructInfo.FullyQualifiedMetadataName}*)GetAgentByInternalId((AgentId){agentGetterInfo.AgentId});");
            }
        }

        return writer.ToString();
    }

    private sealed record AgentGetterInfo(StructInfo StructInfo, uint AgentId);
}

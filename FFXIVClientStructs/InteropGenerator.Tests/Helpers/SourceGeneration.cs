using System.Text;

namespace InteropGenerator.Tests.Helpers;

internal static class SourceGeneration {
    public static (string, string) GetInitializerSource(string containingNamespace, string containingType, IEnumerable<string> functionNames) {
        using IndentedTextWriter.IndentedTextWriter writer = new();
        writer.WriteLine("// <auto-generated/>");
        writer.WriteLine("namespace InteropGeneratorTesting;");
        writer.WriteLine("#pragma warning disable 612, 618");
        writer.WriteLine("public static class Addresses");
        using (writer.WriteBlock()) {
            writer.WriteLine("public static void Register()");
            using (writer.WriteBlock()) {
                foreach (string functionName in functionNames) {
                    string namespaceWithDot = string.IsNullOrEmpty(containingNamespace) ? string.Empty : containingNamespace + ".";
                    writer.WriteLine($"InteropGenerator.Runtime.Resolver.GetInstance.RegisterAddress(global::{namespaceWithDot}{containingType}.Addresses.{functionName});");
                }
            }
            writer.WriteLine("public static void Unregister()");
            using (writer.WriteBlock()) {
                foreach (string functionName in functionNames) {
                    string namespaceWithDot = string.IsNullOrEmpty(containingNamespace) ? string.Empty : containingNamespace + ".";
                    writer.WriteLine($"InteropGenerator.Runtime.Resolver.GetInstance.UnregisterAddress(global::{namespaceWithDot}{containingType}.Addresses.{functionName});");
                }
            }
        }
        writer.WriteLine("#pragma warning restore 612, 618");

        return ("InteropGeneratorTesting.Addresses.g.cs", writer.ToString());
    }

    public static (string, string) GetFixedSizeArraySource(IEnumerable<int> sizes) {
        using IndentedTextWriter.IndentedTextWriter writer = new();
        writer.WriteLine("// <auto-generated/>");
        writer.Write("namespace InteropGeneratorTesting;");
        foreach (int size in sizes) {
            writer.Write("\r\n");
            writer.WriteLine("[global::System.Runtime.InteropServices.StructLayoutAttribute(global::System.Runtime.InteropServices.LayoutKind.Sequential, Pack = 1)]");
            writer.WriteLine($"[global::System.Runtime.CompilerServices.InlineArrayAttribute({size})]");
            writer.WriteLine($"internal struct FixedSizeArray{size}<T> where T : unmanaged");
            writer.WriteLine("{");
            writer.WriteLine("    private T _element0;");
            writer.Write("}");
        }
        return ("InteropGeneratorTesting.FixedArrays.g.cs", writer.ToString());
    }
}
